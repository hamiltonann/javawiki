#summary 快速使用Spring開發Web應用程式.
#labels Featured,Phase-Implementation
說實在的，Spring框架是非常強大的工具，但是從入門到精通，實在是要花不少時
間，長久寫下來，由其在Web開發上，其實就是那一套加加減減，每個專案都要先
花一段時間，先把基本架構Copy & Paste出來。<br/>
所以我才想說乾脆大雜燴一番，把整隻章魚端出來，然後再把不要的手腳砍掉，
把多餘的時間專注在專案本身。<br/>
專案的內容包括 Spring Web(RESTful),Spring Mobile，Spring Security
(資料庫驗證或是使用OpenId驗證),多國語言,JPA(Hibernate),單元測試，整合測試，
程式碼樣式檢查與程式品質檢驗。<br/>
一般來說，我認為可以移除的部分包括Spring Mobile，多國語言，JPA(換上您自個兒習慣的ORM)。 
其它的部分，我則認為應該保留。

= 建立專案 =
最快的方法當然是從命令列開始(以下為建立Servelet 2.5程式，若要建立3.0 Async程式，請將下列版本改為0.1.4a，但也因此SprintSecurity會使用3.2.0M1版本)
{{{
mvn archetype:generate -DarchetypeRepository=http://gwtrepo.googlecode.com/svn/repo \
-DarchetypeGroupId=com.google.code \
-DarchetypeArtifactId=SpringWebStart \
-DarchetypeVersion=0.1.4
}}}
然後回達一些問題
{{{
Define value for property 'groupId': : <輸入群組識別,如：com.yourcompany>
Define value for property 'artifactId': : <輸入專案名稱,如：TestSpringWeb>
Define value for property 'version':  1.0-SNAPSHOT: : <輸入專案的版本，預設為 1.0-SNAPSHOT>
Define value for property 'package':  com.spring: : <輸入套件名稱，預設為群組識別,為方便以下說明，此處定為com.spring>
Confirm properties configuration:
Ｙ: :
}}}
然後建立專案(使用IDE的朋友可以參考最後的段落，使用[#Net_Beans NetBeans]或是[#Eclipse Eclipse]來建立專案）
<br/>然後到Maven的安裝目錄，看一下mvn(或mvn.bat)內*MAVEN_OPTS的設定，考慮加大記憶體的使用如
{{{
MAVEN_OPTS='-Xms512m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512m'
}}}
然後執行
{{{
mvn verify
}}}
就可以看到整個專案從compile到整合測試(含軟體檢測)的所有階段,最後執行(JDK7朋友請看一下[#%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6 單元測試]的注意事項)
{{{
mvn site
}}}
產出所有報表後的內容在 ./target/site目錄下。

= 快速開始 =
  # 套件目錄<b>com.spring.context</b>與<b>com.spring.controller</b>會自動掃瞄可自動建立的Bean，所以建議將公用程式放到Context套件下而將Spring Controller則放到controller套件下
  # 所有Spring設的的進入點在<b>ApplicationContext.java(由此載入applicationContext.xml)</b>，然後包入其它設定檔，例如要Security要使用OpenId而不是資料庫，請將import的<b>applicationContext-security.xml</b>換成<b>applicationContext-openid.xml</b>
  # 所有jsp檔案全放到 WEB-INF/view目錄下，如果要直接從網止列存取，請到<b>applicationContext-mvc.xml</b>內新增設定<b>mvc:view-controller</b>，並考慮是否在<b>applicationContext-security.xml</b>增加一個intercept-url做權限管控
  # 在pom.xml內加入您資料庫的函式參考，並開啟<b>applicationContext.xml</b>，修改 id="appProperies" 內所有JDBC與Hibernate的參數，以適用您的資料庫設定。
  # 因為此模版程式無法連結真實資料庫，所以內附了一個記憶體資料庫，您既然已使用了實體資料庫，所以可以把*applicationContext.xml的<b>jdbc:initialize-database</b>移除並刪除檔案realSchema.sql
  # 您所撰寫的JPA程式請放到 com.spring.modle 套件下，hibernate將自動掃瞄該目錄讀取JPA程式的ORM設定
  # <b>applicationContext-security.xml</b>內有一個<b>port-mappings</b>設定，開發測試時分別將http與ssl對應到8080與8443，真正上線時，必須視實際環境修改。另外有指定Port的檔案分別是<b>pom.xml</b>與<b>testng-integration.xml</b>
  # 在 test/java下撰寫您的單視測試程式與整合測試程式(Class須以Test開頭)，並將之加到<b>testng-unit.xml</b>與<b>testng-integration.xml</b>內(本來是可以自動掃瞄的，但是大型專案的測試有時會跑到睡著，所以設定檔讓我們彈性指定要測試的程式)

= SD4J資料存取說明 =
如果您看了DefaultController.java的源碼，您會發現我使用了[http://code.google.com/p/sd4j/ sd4j]，
那是我寫的另外一個專案，該專案的概念只有兩個，其中Manager主導商業方法並控制交易，也就是裡面一些明顯看起來是資料異動的函式，已經是Transationable，
而Dao則是真正主導資料存取，在程式中使用@DaoManager與＠Dao會自動進行注入([http://code.google.com/p/sd4j/ sd4j]要求環境中要存在一個
[http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/orm/jpa/JpaTransactionManager.html JpaTransactionManager]物件)。
使用方式如下：
{{{
    @DaoManager //自動注入
    private RepositoryManager<Member> memberManager;
}}}
若是您的自已要執行的商業方法(一般發生在特殊選取或是同時異動多個物件)，或是要有必要跨資料物件存取則自行繼承範例如下：
{{{
public class DetailManager extends AnnotatedRepositoryManager<Detail> {
  @Dao //自動注入
  private DaoRepository<Master> masterDao;
  
  public List<Deail> findByMyself(...){
    String da = this.getAliasName();
    String ma = masterDao.getAliasName();
    StringBuilder ql = new StringBuilder("SELECT DISTINCT ").append(da).append(" FROM ").
      append(ma.getEntityName()).append(" ").append(ma).append(" JOIN ").append(ma).append(".collectionDetail ").
      append(da).append(" WHERE ").append(ma).append(".field=?1 ....");
    return getDao().findListByQL(getDao().getClazz()，ql.toString()，參數);
  }
  
  @Transactional(propagation = Propagation.REQUIRED，rollbackFor = Exception.class)
  public int myCustomUpdate(....){
     int res = 0;
     for(Detail detail:findByCriteria("WHERE ....")){
       if(detail.xxx()){
          detail.getMaster.setXXX(...);
          masterDao.update(detail.getMaster());
          ...
          res ++;
       }
     }
     return res;
  }
}
}}}
如果您要採用自已的資料庫存取機制，則請移除pom.xml內的repositories段落與sd4j的dependency。<br/>
但是移除的同時，您也會發現失去一些便利，[http://code.google.com/p/sd4j/ sd4j]有DaoPropertyEditor與IntDaoPropertyEditor
幫忙把Table 為整數或字串primary key轉成ORM物件，DefaultController.userinfo()就是直接把Key值變成Member物件，而不是傳
回Key值後再去Lookup物件。

= 安全性問題 =
這是比較不好處理的議題，常常看到一些程式在每一支裡面都要放上身分檢查(包括我目前在維護的一些舊專案)，
而[http://static.springsource.org/spring-security/site/ Spring Security(S.S)]把我從這些Ugly Code解救出來，但是
Spring 本身已經有點難學了，更何況是Spring Security，早期版本的S.S叫做Acegi，其設定會讓人哭不出來，還好改名以後設定上簡化了不少，
雖說如此，但設定起來也有點不容易，基本上我的設定已經考慮到大部分Web的使用情況，所以我會從說明如何快速設定後再來說明一些細節。
== 快速設定 ==
S.S的管控目標是URL,而人員管控則採用Role Base，相關設定參考applicationContext-security.xml，
例如我會設定 /admin/**只有ROLE_ADMIN(S.S習慣把角色命名為ROLE_XXXX)，可以進入，所以我設定
{{{
<intercept-url pattern="/admin/**" access="(hasIpAddress('192.168.0.0/16') or hasIpAddress('127.0.0.1')) and hasRole('ROLE_ADMIN')" requires-channel="any"/>
}}}
表示具有身分管理員的人在本機上或是公司內部的網路上才可使用 /admin/** 的網址，未登錄的人會導到登錄頁，而不符身分的人會接收到HTTP 403的訊息。
範例程式的登錄頁在 /WEB-INF/view/login.jsp，而所有安全性的錯誤全數導到同目錄的 error.jsp，請直接修改美化這兩頁的內容即可。
S.S的預設登錄路徑在 contextPath下的 /j_spring_security_check，而登出在 /j_spring_security_logout.
login.jsp的登錄頁有個選項：”_spring_security_remember_me“，勾選後會在該瀏覽器記錄該員資訊兩周，當登錄人員在二周內回來時，不用重新登錄就可取回
該員所有身分角色，但這裡有個例外，RemeberMe設定當遇到存取權限為"fullyAuthenticated" 或是 "IS_AUTHENTICATED_FULLY"時，要求必須是經過登錄驗證，
無法透過RemeberMe使用，像 /changePassword 就是這樣設定的，也就是必須直接登錄用戶才可使用。

因為不想讓用戶的帳號密碼在網路上明碼傳遞，所以我設定
{{{
<intercept-url pattern="/j_spring_security_check" access="permitAll" requires-channel="https"/>
}}}
請注意，這裡的requires-channel設定為https，所以若是form的Action採用的是http://localhost/xxx/j_spring_security_check 則會強制被轉址為http://localhost/xxx/j_spring_security_check，
但是S.S的登錄網址/j_spring_security_check被限定只接受POST method，而redirect使用的是GET method，所以我的Login.jsp內設定的是
{{{
  <form method="POST" action="https://..." >
    ...
}}}
才參避免產生錯誤。

另外一個議題是Session是在http連線或是https建立，其結果大不同。<br/>
SessionID記錄在Cookie的JSESSIONID內，若是Session在https://xxx/j_spring_security_check 時才建立，
則JSESSIONID會成為Secured Cookie，表示只有在https連線,Cookie才會被送回主機，所以在回到http連線時無法得知之前建立的Session，
所以有可能再建立一個新的Session產生新的JSESSIONID Cookie覆蓋原有的Session ID；
若是Session建立於http連線，則http下建立的JSESSIONID Cookie，在SSL連線時時也會被送回，
亦即，若Session建立在https時只能在SSL連線下被看見，反之則不然，所以為了保持Sesson的一致，最好的方式就是在http下建立Session。

像範例程式，我希望SSL連線只用於帳號/密碼或是一些機密資料時使用，其它大多時候使用http連線，
好在jsp若是沒有設定session=false時，一般會建立Session，而且S.S的程式不會特地給login鏈結，只有在需要的時候，登錄頁才會出現，
大大避免Session建立在SSL下的機會。

至於一些靜態網頁，則一律不經過S.S，以減少處理的時間，例如：
{{{
    <http pattern="/images" security="none"/>
    <http pattern="/css" security="none"/>
    <http pattern="/scripts" security="none"/>
}}}
同時看一下web.xml的`<servlet-mapping`>設定，我把一些附檔名的連結處理全交給default servlet處理。

關於上述的access設定為什麼會有"fullyAuthenticated" 與 "IS_AUTHENTICATED_FULLY"呢？<br/>
那是因為後期的Spring採用的所謂的表達式語法([http://static.springsource.org/spring/docs/current/spring-framework-reference/html/expressions.html SpEL])
，在設定上會比較彈性，分辨的方法是舊的設定採用全大寫，而SpEL則比較像是程式碼的片段。
相關的access設定請參考[http://static.springsource.org/spring-security/site/docs/3.1.x/reference/el-access.html#el-common-built-in 這裡]
與[http://grails-plugins.github.com/grails-spring-security-core/docs/manual/guide/5%20Configuring%20Request%20Mappings%20to%20Secure%20URLs.html 這裡]。

== Session Fixation ==
首先要說明JSP的一個弱點[http://knowledge.twisc.ntust.edu.tw/doku.php?id=3%E4%BC%BA%E6%9C%8D%E7%AB%AF%E5%AE%89%E5%85%A8:3-2%E6%87%89%E7%94%A8%E7%A8%8B%E5%BC%8F%E5%BC%B1%E9%BB%9E:session%E5%9B%BA%E5%AE%9A%E6%94%BB%E6%93%8A Session Fixation]，
[http://en.wikipedia.org/wiki/Session_fixation Session Fixation]源起於JSESSIONID曝露在URL內，所以我們首先必須把`<http`>的屬性 disable-url-rewriting 設為 true
以防止URL rewrite把;jsessionid加掛到網址列。

另外S.S為了防止[http://static.springsource.org/spring-security/site/docs/3.1.x/reference/ns-config.html#ns-session-fixation Session Fixation]
也建議將`<session-management`>的session-fixation-protection設為migrateSession(預設，每次登錄後重建一個新的Session並抄錄舊Session的內容)
或是newSession(每次登錄後重建一個新的Session)，但是因為範例程式的登錄是在SSL下進行，若是登錄後重建一個新的Session，那麼回到http時，
將因為無法看到Secuired Cookie，而jsp又會重新在http重建一個新Session，產生新的JSESSIONID去覆蓋SSL下產生的Secured同名Cookid，因而導致
SSL登錄的資訊完全遺失，為了上述所說SSL登錄所產生的Session丟失問題，所以只好𢖫痛將之設為"none"。

為了解決這個問題，可以改採登錄OpenId的方式，用http轉到OpenID網站，在這台OpenID主機完全使用SSL連線，然後用http回到Web Site, 
當然機密資訊仍用SSL，但是因為沒有登錄的問題，不會有Sesson重建覆蓋的問題產生。

通常一個企業內不時會新增一些系統，所以我另外寫了一個[http://code.google.com/p/oisso/ OpenID半成品]的專案，
並依我所服務的公司的狀況改寫並應用。如果您不需要，可將範例程式看到OpenId名稱的檔案全數移除。

== Ajax安全性 ==
當存取的網址須登錄或是沒有存取權限時，S.S會把網頁導到登錄頁或是錯誤頁，但顯然在Ajax這是行不通的。<br/>
所以有預設放了一支程式AjaxAwareLoginUrlAuthenticationEntryPoint.java針對明確是使用Ajax進入或是路徑包含了/json的網址視為Ajax存取，直接回應錯誤，
如果您有其它的考量，請自行修改這支程式。
= Controller使用參數 =
如果您看了DefaultController，您會發現每個Spring的Controller不會像Struts那樣需要一個execute(mapping,form,request,response)，
基本上函式名稱隨便自已取，[http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-arguments 參數]隨便放
(因為範例使用的Spring Mobile，所以可以多放一個Device參數)，Spring叫用時，會自個把該填的參數自已填上去，且
[http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-return-types 回傳值]也可自行決定(多半是String)。<br/>
除此之外，參數還可以是[http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-requestmapping-uri-templates 模板變數]與
[http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-ann-requestparam request參數]，
模板變數就像是DefaultController裡面的userinfo函式
{{{
    @RequestMapping("/admin/user/{account}")
    public String userinfo(@PathVariable Member account, HttpServletRequest request) {
      ...
}}}
其中的`{account`}就是模板變數,當http://localhost/xxx/user/admin ，account參數會代入到參數列內(主要是int與String，其它型態要再處理)，
或者我們常用如：
{{{
   String account = request.getParameter("account");
}}}
也可放入變成參數，如http://localhost/xxx/admin/user?account=admin
{{{
    @RequestMapping("/admin/user")
    public String userinfo(@RequestParam Member account, HttpServletRequest request) {
      ...
}}}
您也許會奇怪，request.getParameter取得的是String，倒底是如何變成了物件Member?上面也說過，參數只能對應到一些簡單型態，
所以請看DefaultController.initBinder()，WebDataBinder.registerCustomEditor()，註冊了數種轉換方式，
當參數裡出現了不解的型態，Spring MVC就會找尋有無註冊的轉換物件，我就是透過這種方式由account找出資料庫中對應的Member物件。
Spring本身也提供了一些預設的[http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/beans/propertyeditors/package-summary.html 轉換物件]，
若是有用到也請在initBinder()自行註冊。

此外，還可以放一個參數[http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/web/multipart/MultipartFile.html MultipartFile]表示
[http://static.springsource.org/spring/docs/current/spring-framework-reference/html/mvc.html#mvc-multipart-forms 上傳]的檔案，
但是在此範例程式並未啟用相關設定，若要啟用相關設定，請打開 applicationContext-mvc.xml 啟用 multipartResolver 設定。
若要測試上傳檔案，也請將 multipartResolver 設定抄錄到 testContext.xml 內，然後使用測試程式如下：
{{{
    ...
    mockMultipartHttpServletRequest.setParameter("point", "10");
    mockMultipartHttpServletRequest.addFile(new MockMultipartFile("檔案欄位名稱",...);
    ...
}}}

= 多國語系支援 =
範例程式包含了多國語系支援，請編輯messages properties檔案，若是您不想用其實也不用特地移除相關檔案，因為在messages_zh_TW.properties有我將
Spring Security的中文化的訊息。<br/>
若是使用了多國語系支援, 無論是單視測試或是整合測試都必須要小心回應的訊息，可能因測試機器預設語系的不同而有所不同。<br/>
在單元測試時，當多國語系存在時，必須將語系固定在某一個語系上，否則可能會因為機器預設語系的不同而得到不同的結果。
所以在 testContext.xml 內的`<bean id="messageAccessor" .../`>的第二個建構參數，我設為固定的語系，以便在測試時能得到預期的結果。
但若是整合測試時，由於整合測試為實際啟動WebServer，所以請在reqeust URL後面加上參數如：http`://localhost:8080/user/myinfo`?<b>locacle=en_US</b>
以便檢測網頁實際產生的內容。

若您真的不須要多國語系，請移除 applicationContext.xml、applicationContext-mvc.xml與testContext.xml 所有標為i18n的設定。

= 測試 =
== 測試資料 ==
首先測試要有資料，直接連到資料庫，顯然不是好的方法，萬一上線後有需求變更，改到真實資料就不妙了。
 
所以我建議的是使用[http://en.wikipedia.org/wiki/In-memory_database 記憶體資料庫]，也就是資料庫只存在於記憶體當中。[http://www.h2database.com/html/main.html H2]與[http://hsqldb.org/ HyperSQL]
都是不錯的選擇。

首先看 testContext.xml 我用了jdbc:initialize-database在測試程式開始時執行SQL Script，進行資料庫的DDL與DML作業。
== 單元測試 ==
  # Maven由[http://maven.apache.org/plugins/maven-surefire-plugin/ maven-surefire-plugin]幫助進行單元測試，若是pom.xml內沒有特別設定，則[http://maven.apache.org/plugins/maven-surefire-plugin/test-mojo.html#includes 預設]以Test開頭、結尾或是以TestCase結尾的Java檔作為測試標的。
  # 測試程式若是需要載入Spring Context環境，則可以繼承[http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/test/context/testng/AbstractTestNGSpringContextTests.html AbstractTestNGSpringContextTests]([http://testng.org testNG])、[http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/test/context/junit4/AbstractJUnit4SpringContextTests.html AbstractJUnit4SpringContextTests](Junit4)或是[http://static.springsource.org/spring/docs/current/javadoc-api/org/springframework/test/context/junit38/AbstractJUnit38SpringContextTests.html AbstractJUnit38SpringContextTests](Junit 3.8)
  # 一般性的功能測試請inject相關的Bean進來測試就行了，測試Spring Web的功能，請參考測試程式TestDefaultController.java，最終的測試報告請查看 target/surefire-reports/index.html。
<b>注意事項</b>：Spring 3.2採用了fluent的測試方法，使用方式請參考[http://www.javaworld.com.tw/jute/post/view?bid=42&id=311959&sty=0 這裡]。
== 整合測試 ==
這裡要說明的是整合測試實際上會把Web上起來實測，所以請注意http與https的Port是否有被其它程式佔用，
範例程式採用Jetty進行測試，您也可以以下列命令直接將WEB程式上起來。
{{{
    mvn jetty:run 或是 mvn tomcat7:run
}}}
或是以
{{{
    mvn integration-test
}}}
進行整合測試，若是您要採用Tomcat進行測試，請打開pom.xml，
  # 把｀<build`>內的 jetty-maven-plugin 段落移除
  # 把｀<build`>內的 tomcat7-maven-plugin 段落內的`<executions`>啟用，然後把`<fork`>設為True(因為Tomcat7若不採用另一個JDK執行，測試後將無法正常關閉)
整合測試完成後，最後報表會產出在target/failsafe-reports/index.html.
註：
  # 在執行jetty或是tomcat時，請先執行 mvn wro4j:run，因為網頁會參考合併的css與javascrip，而合併的動作我放在pre-package階段，所以只能手動自行合併產生
  # 與其僅僅是執行mvn integration-test，還不如直接執行 mvn verify，因為verify就包含了整合測試
== 軟體品質檢測 ==
若您是使用
{{{
   mvn verify
}}}
則會再執行[http://pmd.sourceforge.net/ PMD]源碼檢測與[http://findbugs.sourceforge.net/ findbugs]檢測，兩者在`<build`>與`<reporting`>內都有設定，
也就是說使用 <b>mvn site</b> 產生報表時會再執行一次，因為PMD查出問題時，並不代表程式一定有錯，也許是多個“；”號或是多import 了一個沒有用到的Class，
但是卻會造成verify報錯，或許您可以考慮把`<build`>內的maven-pmd-plugin移除。

或許您也會奇怪，為何`<build`>與`<reporting`>為何設定了一些同樣的plugin?
  # 首先是因為Maven無法將`<build`>與`<reporting`>統一管理(您或許看過，有一些`<xxxManagement `>, 那是就來多模組時作為集中管理的tag)
  # 另外是考慮到，您可能單獨執行某些命令，如 <b>mvn findbugs:check</b> 或是 <b>mvn javadoc:javadoc</b> ，那麼就只能設定在`<build`>內，與`<reporting`>產生報表的設定無關。
= 以IDE建立專案 =
== Net Beans ==
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarch1.png" alt="開啟新專案" title="開啟新專案"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarch2.png" alt="填入Archetype資訊" title="填入Archetype資訊"/><br/>
     以上Version:處請輸入最新版本0.1.4或是0.1.4a</div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarch3.png" alt="填入專案資訊" title="填入專案資訊"/></div>
然後建立專案
== Eclipse ==
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche1.png" alt="開啟新專案" title="開啟新專案"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche2.png" alt="選擇專案位置" title="選擇專案位置"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche3.png" alt="加入Archetype" title="加入Archetype"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche4.png" alt="填入Archetype資訊" title="填入Archetype資訊"/><br/>
     以上GoupId請改成com.google.code而Version:處請輸入最新版本0.1.4或是0.1.4a</div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche5.png" alt="選擇Archetype" title="選擇Archetype"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche6.png" alt="填入專案資訊" title="填入專案資訊"/></div>
然後建立專案
　
