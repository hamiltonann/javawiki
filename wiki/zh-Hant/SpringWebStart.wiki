#summary 快速使用Spring開發.
#labels Featured,Phase-Implementation

說實在的，Spring框架是非常強大的工具，但是從入門到精通，實在是要花不少時
間，長久寫下來，由其在Web開發上，其實就是那一套加加減減，每個專案都要先
花一段時間，先把基本架構Copy & Paste出來。<br/>
所以我才想說乾脆大雜燴一番，把整隻章魚端出來，然後再把不要的手腳砍掉，
把多餘的時間專注在專案本身。

= 建立專案 =
最快的方法當然是從命令列開始：
{{{
mvn archetype:generate -DarchetypeRepository=http://gwtrepo.googlecode.com/svn/repo \
-DarchetypeGroupId=com.google.code \
-DarchetypeArtifactId=SpringWebStart \
-DarchetypeVersion=0.1
}}}
然後回達一些問題
{{{
Define value for property 'groupId': : <輸入群組識別,如：com.yourcompany>
Define value for property 'artifactId': : <輸入專案名稱,如：TestSpringWeb>
Define value for property 'version':  1.0-SNAPSHOT: : <輸入專案的版本，預設為 1.0-SNAPSHOT>
Define value for property 'package':  com.spring: : <輸入套件名稱，預設為群組識別,為方便以下說明，此處定為com.spring>
Define value for property 'DomainName': : <輸入產生網頁SSL憑證的CN,如：localhost>
Confirm properties configuration:
Ｙ: :
}}}
然後建立專案(使用IDE的朋友可以參考最後的段落，使用[NetBeans]或是[Eclipse]來建立專案）
<br/>然後到Maven的安裝目錄，看一下mvn(或mvn.bat)內*MAVEN_OPTS的設定，考慮加大記憶體的使用如
{{{
MAVEN_OPTS='-Xms512m -Xmx1024m -XX:PermSize=256m -XX:MaxPermSize=512m'
}}}
然後執行
{{{
mvn verify
}}}
就可以看到整個專案從compile到整合測試的所有階段,最後執行
{{{
mvn site
}}}
產出所有報表後的內容在 ./target/site目錄下。

= 快速開始 =
　
  # 套件目錄<b>com.spring.context</b>與<b>com.spring.controller</b>會自動掃瞄可自動建立的Bean，所以建議將公用程式放到Context套件下而將Spring Controller則放到controller套件下
  # 所有Spring設的的進入點在<b>applicationContext.xml</b>，然後包入其它設定檔，例如要Security要使用OpenId而不是資料庫，請將import的<b>applicationContext-security.xml</b>換成<b>applicationContext-openid.xml</b>
  # 所有jsp檔案全放到 WEB-INF/view目錄下，如果要直接從網止列存取，請到<b>applicationContext-mvc.xml</b>內新增設定<b>mvc:view-controller</b>，並考慮是否在<b>applicationContext-security.xml</b>增加一個intercept-url做權限管控
  # 在pom.xml內加入您資料庫的函式參考，並開啟<b>applicationContext.xml</b>，修改 id="appProperies" 內所有JDBC與Hibernate的參數，以適用您的資料庫設定。
  # 因為此模版程式無法連結真實資料庫，所以內附了一個記憶體資料庫，您既然已使用了實體資料庫，所以可以把*applicationContext.xml的<b>jdbc:initialize-database</b>移除並刪除檔案realSchema.sql
  # 您所撰寫的JPA程式請放到 com.spring.modle 套件下，hibernate將自動掃瞄該目錄讀取JPA程式的ORM設定
  # <b>applicationContext-security.xml</b>內有一個<b>port-mappings</b>設定, 開發測試時分別將http與ssl對應到8080與8443, 真正上線時，必須視實際環境修改。另外有指定Port的檔案分別是<b>pom.xml</b>與<b>testng-integration.xml</b>
  # 在 test/java下撰寫您的單視測試程式與整合測試程式(Class須以Test開頭)，並將之加到<b>testng-unit.xml</b>與<b>testng-integration.xml</b>內(本來是可以自動掃瞄的，但是大型專案的測試有時會跑到睡著，所以設定檔讓我們彈性指定要測試的程式)

= 以IDE建立專案 =
== NetBeans ==
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarch1.png" alt="開啟新專案" title="開啟新專案"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarch2.png" alt="填入Archetype資訊" title="填入Archetype資訊"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarch3.png" alt="填入專案資訊" title="填入專案資訊"/></div>
然後建立專案
== Eclipse ==
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche1.png" alt="開啟新專案" title="開啟新專案"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche2.png" alt="選擇專案位置" title="選擇專案位置"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche3.png" alt="加入Archetype" title="加入Archetype"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche4.png" alt="填入Archetype資訊" title="填入Archetype資訊"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche5.png" alt="選擇Archetype" title="選擇Archetype"/></div>
<div><img src="http://javawiki.googlecode.com/svn/images/mavenarche6.png" alt="填入專案資訊" title="填入專案資訊"/></div>
然後建立專案

　專案的內容包括 Spring Web(RestFul),Spring Mobile, Spring Security
(資料庫驗證或是使用OpenId驗證),多國語言,JPA(Hibernate),單元測試，整合測試，
程式碼樣式檢查與程式品質檢驗。<br/>
  一般來說，我認為可以移除的部分包括Spring Mobile，多國語言，JPA(換上您自個兒習慣的ORM)。 
其它的部分，我則認為應該保留。
Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages
